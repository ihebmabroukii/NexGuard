###############################################################################
# NexGuard Logstash Pipeline - Production
# Features:
# - Parses Wazuh JSON alerts
# - Maps MITRE ATT&CK IDs
# - Enriches with Threat Intelligence feeds (IPs, domains, hashes)
###############################################################################
########################
# INPUT
########################
input {
  beats {
    port => 5044
  }
}

########################
# FILTER
########################
filter {
  # Parse Wazuh JSON
  json {
    source => "message"
    target => "wazuh"
    remove_field => ["message"]
  }

  # Map MITRE ATT&CK IDs to standard field
  if [wazuh][rule][mitre] {
    mutate { rename => { "[wazuh][rule][mitre]" => "[wazuh][mitre_ids]" } }
  }

  # Threat Intelligence enrichment
  # Load IP, domain, hash feeds from a local file or HTTP endpoint
  translate {
    field => "[wazuh][srcip]"
    destination => "[wazuh][threatintel][ip]"
    dictionary_path => "/var/ossec/etc/threatintel/ip_feed.yml"
    fallback => "unknown"
  }

  translate {
    field => "[wazuh][srcuser]"
    destination => "[wazuh][threatintel][user]"
    dictionary_path => "/var/ossec/etc/threatintel/user_feed.yml"
    fallback => "unknown"
  }

  translate {
    field => "[wazuh][hash]"
    destination => "[wazuh][threatintel][hash]"
    dictionary_path => "/var/ossec/etc/threatintel/hash_feed.yml"
    fallback => "unknown"
  }

  # GeoIP enrichment
  if [wazuh][srcip] {
    geoip {
      source => "[wazuh][srcip]"
      target => "geoip"
      add_field => { "[wazuh][geoip_location]" => "%{[geoip][city_name]}" }
    }
  }

  # Timestamp normalization
  if [wazuh][timestamp] {
    date {
      match => [ "[wazuh][timestamp]", "ISO8601" ]
      target => "@timestamp"
    }
  }

  # Clean unneeded fields
  mutate { remove_field => ["host", "path", "input", "beat"] }
}

########################
# OUTPUT
########################
output {
  elasticsearch {
    hosts => ["http://elasticsearch:9200"]
    index => "nexguard-logs-%{+YYYY.MM.dd}"
    user => "${ELASTIC_USER}"      # from .env
    password => "${ELASTIC_PASSWORD}" # from .env
    ssl => true
    ssl_certificate_verification => false
  }

  stdout { codec => rubydebug }
}
